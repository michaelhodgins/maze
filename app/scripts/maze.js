// Generated by CoffeeScript 1.7.1
var Maze;

Maze = (function() {
  function Maze(canvas, fps) {
    this.canvas = canvas;
    this.fps = fps != null ? fps : 60;
    this.context = this.canvas.getContext('2d');
    this.width = this.canvas.width;
    this.height = this.canvas.height;
    this.desiredStep = 1000 / this.fps;
    this.cameraPosition = {
      x: false,
      y: false,
      angle: false
    };
    this.keyPressed = {
      shift: false
    };
    $(this.canvas).on('keydown keyup', (function(_this) {
      return function(event) {
        var keyName;
        keyName = Maze.keys[event.which];
        if (keyName) {
          _this.keyPressed[keyName] = event.type === 'keydown';
          event.preventDefault();
        }
        return _this.keyPressed.shift = event.shiftKey;
      };
    })(this));
  }

  Maze.prototype.setMap = function(map) {
    var _ref;
    this.map = map;
    return (_ref = this.camera) != null ? _ref.map = this.map : void 0;
  };

  Maze.prototype.setCamera = function(camera) {
    this.camera = camera;
    if (this.map) {
      return this.camera.map = this.map;
    }
  };


  /*
  Called to start the game loop
   */

  Maze.prototype.start = function() {
    this.recordUpdate();
    return this.frame((function(_this) {
      return function() {
        return _this.loop();
      };
    })(this));
  };


  /*
  Call to record when an update cycle was completed
   */

  Maze.prototype.recordUpdate = function() {
    return this.lastUpdate = new Date().getTime();
  };


  /*
  Sets up the mechanism for repeatedly updating and drawing the game.
   */

  Maze.prototype.frame = function(callFrame) {
    var interval;
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame((function(_this) {
        return function() {
          callFrame();
          return _this.frame(callFrame);
        };
      })(this));
    } else {
      interval = 1000 / this.fps;
      return setInterval(function() {
        return callFrame();
      }, interval);
    }
  };


  /*
  Execute one update and drawing loop.
   */

  Maze.prototype.loop = function() {
    var startTime, steps, timePassed;
    startTime = new Date().getTime();
    timePassed = startTime - this.lastUpdate;
    steps = this.desiredStep / timePassed;
    this.update(steps);
    this.draw();
    return this.recordUpdate();
  };


  /*
  Update all the entities once.
   */

  Maze.prototype.update = function(steps) {
    if (this.keyPressed.up) {
      this.camera.move(15);
    } else if (this.keyPressed.down) {
      this.camera.move(-15);
    }
    if (this.keyPressed.left) {
      if (this.keyPressed.shift) {
        return this.camera.strife(-15);
      } else {
        return this.camera.angle -= 1.3;
      }
    } else if (this.keyPressed.right) {
      if (this.keyPressed.shift) {
        return this.camera.strife(15);
      } else {
        return this.camera.angle += 1.3;
      }
    }
  };


  /*
  Draw each entity.
   */

  Maze.prototype.draw = function() {
    var gradient;
    if (this.camera.x !== this.cameraPosition.x || this.camera.y !== this.cameraPosition.y || this.camera.angle !== this.cameraPosition.angle) {
      gradient = this.context.createLinearGradient(0, 0, 0, this.canvas.height / 2);
      gradient.addColorStop(0, '#6698FF');
      gradient.addColorStop(1, '#2554C7');
      this.context.fillStyle = gradient;
      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height / 2);
      gradient = this.context.createLinearGradient(0, 0, 0, this.canvas.height);
      gradient.addColorStop(0, '#254117');
      gradient.addColorStop(1, '#4AA02C');
      this.context.fillStyle = gradient;
      this.context.fillRect(0, this.canvas.height / 2, this.canvas.width, this.canvas.height);
      this.camera.project(this.canvas, this.context);
    }
    this.cameraPosition.x = this.camera.x;
    this.cameraPosition.y = this.camera.y;
    return this.cameraPosition.angle = this.camera.angle;
  };


  /*
  Constants for some keys we're interesting in
   */

  Maze.keys = {
    32: "space",
    37: "left",
    38: "up",
    39: "right",
    40: "down",
    80: "P",
    83: "S"
  };

  return Maze;

})();
