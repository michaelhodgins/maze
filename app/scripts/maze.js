// Generated by CoffeeScript 1.7.1
var Maze;

Maze = (function() {
  function Maze(canvas, fps) {
    this.canvas = canvas;
    this.fps = fps != null ? fps : 60;
    this.context = this.canvas.getContext('2d');
    this.width = this.canvas.width;
    this.height = this.canvas.height;
    this.desiredStep = 1000 / this.fps;
    this.debug = false;
  }

  Maze.prototype.setMap = function(map) {
    this.map = map;
  };

  Maze.prototype.setCamera = function(camera) {
    this.camera = camera;
  };


  /*
  Called to start the game loop
   */

  Maze.prototype.start = function() {
    this.recordUpdate();
    return this.frame((function(_this) {
      return function() {
        return _this.loop();
      };
    })(this));
  };


  /*
  Call to record when an update cycle was completed
   */

  Maze.prototype.recordUpdate = function() {
    return this.lastUpdate = new Date().getTime();
  };


  /*
  Sets up the mechanism for repeatedly updating and drawing the game.
   */

  Maze.prototype.frame = function(callFrame) {
    var interval;
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame((function(_this) {
        return function() {
          callFrame();
          return _this.frame(callFrame);
        };
      })(this));
    } else {
      interval = 1000 / this.fps;
      return setInterval(function() {
        return callFrame();
      }, interval);
    }
  };


  /*
  Execute one update and drawing loop.
   */

  Maze.prototype.loop = function() {
    var startTime, steps, timePassed;
    startTime = new Date().getTime();
    timePassed = startTime - this.lastUpdate;
    steps = this.desiredStep / timePassed;
    this.update(steps);
    this.draw();
    return this.recordUpdate();
  };


  /*
  Update all the entities once.
   */

  Maze.prototype.update = function(steps) {};


  /*
  Draw each entity.
   */

  Maze.prototype.draw = function() {
    var gradient;
    gradient = this.context.createLinearGradient(0, 0, 0, this.canvas.height / 2);
    gradient.addColorStop(0, '#6698FF');
    gradient.addColorStop(1, '#2554C7');
    this.context.fillStyle = gradient;
    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height / 2);
    gradient = this.context.createLinearGradient(0, 0, 0, this.canvas.height);
    gradient.addColorStop(0, '#254117');
    gradient.addColorStop(1, '#4AA02C');
    this.context.fillStyle = gradient;
    this.context.fillRect(0, this.canvas.height / 2, this.canvas.width, this.canvas.height);
    return this.camera.project(this.map, this.canvas, this.context);
  };

  return Maze;

})();
